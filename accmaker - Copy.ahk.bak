#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.


SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.
CoordMode, Mouse
SetDefaultMouseSpeed 100


global genrate := Text:="|<>*144$39.zzzzzzbzzzzzwzzzzzzU3sCFUk7CQktnVtXWDyQDAyFznVtU2TkQDAznsnVtbySSQDATnnnVtlqSAQDD0ns3o"

;generate()

Loop , 2000
{
changevpn()
;Start_Time := A_TickCount
;wait_time := A_TickCount - Start_Time
;x = 0
;while (x = 0)
;	{
;wait_time := A_TickCount - Start_Time
;	if (wait_time > 30000 )
;	{
;		changevpn()
;		Start_Time := A_TickCount
;	}
;    
;    
;;Text:="|<connected>*142$71.0C00000000U00U000004010020000008020041lMgCCwsw0084H9YWUW+800E8IG9x17oE00UEcYG2288U01WWF8Y44EF000ssWF7b6SS00000000000008"
;;if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;;			{
;;				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;;				; Click, %X%, %Y%
;;				break
;;			}
;Text:="|<established>*135$25.QwC7mFAaM8YG/YHt4G90X94mNsWC7k"
;		if (ok:=FindText(1960, 1023, 20, 50, 0, 0, Text))
;			{
;				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;				 MouseMove, %X%, %Y%
;				break
;			}
;			else
;			{
;				w := Error()
;				x = 0
;				if (w = 1)
;				{
;					w = 0
;					Start_Time := A_TickCount
;				}
;			}
;	}

generate()
sleep 100

Text:= genrate
		while (!ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
			{
				Error()
			}

Text:="|<s.no>*131$53.zxzzzzzzzzvzzzzzzzzrzVzzzzzzjyxzzzzzzTxvzzzzzyzvrzzzzzxzrjzzzzzvzjTzzzzzrzSzzzzzzjyxzzzzzzTxvzzzzzyzvrzzzzzxzsTzzzzzvzzzzzzzzrzzzzzzzzjzzzzzzzzTzzzzzzzyzzzzzzzzxzzzzzzzzvzzzzzzy"

if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
	{
		X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
		Click, %X%, %Y%
		x1 := x
		y1 := y
	}

Text:="|<select_end>*137$16.zzTzxzzrzzTzxzzrzzTzxzzrzzTzxzzrzzTzxzzr00Tzzzzzzzy"

if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
	{
		X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
		Sleep 10
		y1 := y1 - 10
		x1 := x1 - 16
		Sleep 10
		MouseClickDrag, left, x,y,x1,y1 ,100
		Sleep 100
		Send, {ctrl down}
		Sleep 100
		Send, {c down}
        sleep 100
        Send, {c up}
        sleep 100
		Send, {ctrl up}
		Sleep 100
		Click, %X%, %Y%
	}

Text:="|<empty_colum>*240$71.00000000000U0000000000100000000000200000000000400000000000800000000000E00000000000U0000000000100000000000200000000000400000000000800000000000Ezzzzzzzzzzzy0000000000100000000000200000000000400000000000800000000000E00000000000U0000000000100000000000200000000000400000000000800000000000E00000000000V"

if (ok:=FindText(2023, 1080, 150, 1080, 0, 0, Text))
	{
		X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
	Click, %X%, %Y%
		sleep 300
		Send, {ctrl down}
		Sleep 100
		Send, {v down}
        sleep 100
        Send, {v up}
        sleep 100
		Send, {ctrl up}
		Sleep 100	
	}
	else
	{
	Click, 2023, 1080
	sleep 100
	Send {PgDn}
	sleep 500
	if (ok:=FindText(2023, 1080, 150, 1080, 0, 0, Text))
	{
	X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
	Click, %X%, %Y%	
	sleep 100
		Send, {ctrl down}
		Sleep 100
		Send, {v down}
        sleep 100
        Send, {v up}
        sleep 100
		Send, {ctrl up}
		Sleep 100	
	}
	}


}


!p::Pause










Text:="|<error>*117$35.zzzzzz0DzzzyTzzzzwzzzzztzV33UnzCQnDU6QnmTDwtbYyTtnD9wznaSHtzbCNbk1CS7Dzzzzzz"
Text:="|<completed>*114$71.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzw7zzzzzDzjzynbzzzzyTyTzxDbzzzzwzwzzuTy7030tUkkw1zta8mAmQnAn3zbYtYQYtYwbLzD9n9t8380SbmSHaHmLyHwxDYwbAXYbwbwvCAnCN6NCNa9b1wCQm1n1lUsDzzzzwzzzzzzzzzzztzzzzzzzzzzznzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
Text:="|<empty_colum>*240$71.00000000000U0000000000100000000000200000000000400000000000800000000000E00000000000U0000000000100000000000200000000000400000000000800000000000Ezzzzzzzzzzzy0000000000100000000000200000000000400000000000800000000000E00000000000U0000000000100000000000200000000000400000000000800000000000E00000000000V"

Text:="|<s_no>*120$19.jzzrzVvzaRznazvnTttjwwrySPzjBznaztbTy7jzzk"
Text:="|<connected>*145$59.w0U23E200201046040043rTDBDDbXzg4WHOEN8gkC8QWosWlEU6H95cR5UV1YYmPG+95bttjbabYHty"
Text:="|<retry>*165$29.000007U4009UM00HSvl0xZYq1Pv8c2K6Fk4LaX00a020000A8"

Text:="|<cancel_conection>*170$71.U000kT00000m0001VU00001Uwwxv21xxwtvc9/2K42//++6HmS7w84KKLoAYYw8MM8ggc8Nj9jSkTTNNSSv"
Text:="|<genrate>*147$71.zzzzzzzzzzzzk7zzzzzzzwzyDDzzzzzzztztzzzzzzzzznznzw78TVsA70sDzna6QNlnbD6TzDAQNtbz6SSw6T9wXnDyAsxzA0Ht06TUNk3yNzbmTwwMnbnwnzDYTttlb7btXyTAznnXDDXnbgyMtba6CDU7UNws7DUC63zzzzzzzzzzzzzzzzzzzzzzzs"
Text:="|<genrate2>*147$59.zzzzzzzzzzkDzzzzzzzzDTzzzzzyzwzzzzzzzxznzks7VUVUk7zAlCN7NrAC6wb9mTviQT81CE4y7Q0yHyQbtnivwwrwtDnaRnstbNmAbAtbQ3Una3D1lUU"
Text:="|<stop>*142$41.zzzzzzzzzzzzzzs6Tzzzz7AzzzzyTtzzzzwz0s70Dtzbb66DszCDASTsSQy8yTwQtyFwzyNnwXtzwnbl7Xvtb7aDDnXDCAATkT71s1zzzzzlzzzzzzXzzzzzz7zzzzzyDz"
Text:="|<select_end>*137$16.zzTzxzzrzzTzxzzrzzTzxzzrzzTzxzzrzzTzxzzr00Tzzzzzzzy"

if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
{
  X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
  ; Click, %X%, %Y%
}


changevpn()
{
 RunWait, D:\work stuff\platform-tools\adb.exe shell am start -a android.settings.AIRPLANE_MODE_SETTINGS
 Sleep 1000
  RunWait, D:\work stuff\platform-tools\adb.exe shell input tap 955 1800
  Sleep 500
 RunWait, D:\work stuff\platform-tools\adb.exe shell input tap 969 1359
  Sleep 1500
   RunWait, D:\work stuff\platform-tools\adb.exe shell input tap 969 1359
   
   loop
  {
    html := ping_check()
If html 
break
Sleep 1000
}
 RunWait,  D:\work stuff\platform-tools\adb.exe shell am force-stop com.android.settings
;				Click, 1662, 100
;                Sleep 300
;                Click, 1662, 100
;                Sleep 20
;                Click, 1662, 100
;                Sleep 300
;                
;Text:="|<up_arrow>*230$7.00000EQTRwQ4000007zzzzzzzzzzzk"
;                 if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;				{
;                  Text:="|<click_uptime>*155$36.000000EU0800EU2000EU2000EZrdPXEaG9YYEY+94bEY+94YMaG94YD7Vd4X040000040000040000000000U"
;                        if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;						{	
;							X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;							Click, %X%, %Y%
;							sleep 300
;							Click, %X%, %Y%
;							sleep 150
;							Random, rand, 12, 200
;							y := y + rand
;							Click, %X%, %Y%
;						}
;				}
;                else
;                {
;                  Text:="|<down_arrow>*211$7.zzzzzzzzzzzzzz0000000Usyvss80E"
;                   if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;                    {
;                  Text:="|<click_uptime>*155$36.000000EU0800EU2000EU2000EZrdPXEaG9YYEY+94bEY+94YMaG94YD7Vd4X040000040000040000000000U"
;                        if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;						{
;                          X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;							Click, %X%, %Y%
;							sleep 300
;							Click, %X%, %Y%
;							sleep 150
;							Random, rand, 12, 200
;							y := y + rand
;							Click, %X%, %Y%
;                      
;                        } 
;                    }
;                }    
;
;						sleep 200
;						;send {Down}						
;						sleep 600
;;Text:="|<connect>250@0.78$56.7k00000003w0000000lU0000000Cs1wTXwD3rw0nbQvaNUn08NXAPikAs66Mn6zg360laAlg30lzClXANYRC7lsMn6D3ls"
;;					if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;;						{	
;;						X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;;						Click, %X%, %Y%
;;						sleep 200
;;						}
;;					Text:="|<ok>59@0.70$13.C8cYc+Y5W2t1Kl974M"	
;;					if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
;;						{	
;;						X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;;						Click, %X%, %Y%
;;						sleep 200
;;						}					
;						;SendRaw {enter}
;						;sleep 600
;						;SendRaw {enter}						
;						;sleep 600
;						;SendInput {enter}
;						sleep 600
;						;send {enter}						
;	RunWait, "C:\Program Files (x86)\Nemex\Mouse Recorder Pro 2\Mouse Recorder Pro.exe" "C:\Users\rasti\Documents\My Recorded Scripts\connectvpn.m2s" -count1 -autorun -end -hide
;sleep 100
}

generate()
{
Text:=genrate


		if (ok:=FindText(1920, 1080, 1920, 1080, 0.1, 0.1, Text))
			{
				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
				Click, %X%, %Y%
				sleep 100
			}
Text:="|<>*143$60.s7zzzzzzzznrzzzzzzbzbzzzzzzzbzbz3US62231DyNXAmCnaQC6wb9mTvaQDo0b82T3a0jozb9yQPaTbqTb9yQvaTnqRbAmQnaAs71bA6S3X1U"


		if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
			{
				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
				Click, %X%, %Y%
			}
        else
            {
            if (ok:=FindText(1920, 1080, 1920, 1080, 0, 0, Text))
              {
				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
				Click, %X%, %Y%
              }
            }
}

Error()
{
;			Text:="|<cancel_connect>*152$11.wxhi+AIMclFU"
;            if (ok:=FindText(2081, 1213, 15, 15, 0, 0, Text))
;			{
;				X:=ok.1.1, Y:=ok.1.2, W:=ok.1.3, H:=ok.1.4, Comment:=ok.1.5, X+=W//2, Y+=H//2
;				Click, %X%, %Y%
;				sleep 100
;				changevpn()
;				w = 1
;				return w
;			}
}


ping_check()
	{
		k =
		Server = www.google.co.in  ; network server name/ip
		ServerDown =          ; clearing out variable
		
;Settimer, ServerCheck, 5000  ; currently set to 5 secs for testing
		
;ServerCheck:
		Target = %Server% -n 1 -w 250 
		Run, %comspec% /c ping %Target% > Ping.log, , Hide
		Sleep, 250
		FileRead, FileContent, Ping.log 
		If FileContent not contains Reply from ; or another error 
		{
  ;MsgBox, %Server% not responding  ; for testing
  ;ServerDown++ ; increments up the timeout count
		}
		Else
		{
			k = 1
  ;MsgBox, %Server% is up  ; for testing
  ;ServerDown = ; clears the timeout count in case there was any on it
		}
		FileDelete, Ping.log
		Return k
	}






















FindText(x,y,w,h,err1,err0,text)
{
  xywh2xywh(x-w,y-h,2*w+1,2*h+1,x,y,w,h)
  if (w<1 or h<1)
    return, 0
  bch:=A_BatchLines
  SetBatchLines, -1
  ;--------------------------------------
  GetBitsFromScreen(x,y,w,h,Scan0,Stride,bits)
  ;--------------------------------------
  sx:=0, sy:=0, sw:=w, sh:=h, arr:=[]
  Loop, Parse, text, |
  {
    v:=A_LoopField
    IfNotInString, v, $, Continue
    comment:="", e1:=err1, e0:=err0
    ; You Can Add Comment Text within The <>
    if RegExMatch(v,"<([^>]*)>",r)
      v:=StrReplace(v,r), comment:=Trim(r1)
    ; You can Add two fault-tolerant in the [], separated by commas
    if RegExMatch(v,"\[([^\]]*)]",r)
    {
      v:=StrReplace(v,r), r1.=","
      StringSplit, r, r1, `,
      e1:=r1, e0:=r2
    }
    StringSplit, r, v, $
    color:=r1, v:=r2
    StringSplit, r, v, .
    w1:=r1, v:=base64tobit(r2), h1:=StrLen(v)//w1
    if (r0<2 or h1<1 or w1>sw or h1>sh or StrLen(v)!=w1*h1)
      Continue
    ;--------------------------------------------
    mode:=InStr(color,"*") ? 1:0
    color:=StrReplace(color,"*") . "@"
    StringSplit, r, color, @
    color:=mode=1 ? r1 : ((r1-1)//w1)*Stride+Mod(r1-1,w1)*4
    n:=Round(r2,2)+(!r2), n:=Floor(255*3*(1-n))
    StrReplace(v,"1","",len1), len0:=StrLen(v)-len1
    VarSetCapacity(allpos, 1024*4, 0), k:=StrLen(v)*4
    VarSetCapacity(s1, k, 0), VarSetCapacity(s0, k, 0)
    ;--------------------------------------------
    if (ok:=PicFind(mode,color,n,Scan0,Stride,sx,sy,sw,sh
      ,v,s1,s0,Round(len1*e1),Round(len0*e0),w1,h1,allpos))
      or (err1=0 and err0=0
      and (ok:=PicFind(mode,color,n,Scan0,Stride,sx,sy,sw,sh
      ,v,s1,s0,Round(len1*0.05),Round(len0*0.05),w1,h1,allpos)))
    {
      Loop, % ok
        pos:=NumGet(allpos, 4*(A_Index-1), "uint")
        , rx:=(pos&0xFFFF)+x, ry:=(pos>>16)+y
        , arr.Push( [rx,ry,w1,h1,comment] )
    }
  }
  SetBatchLines, %bch%
  return, arr.MaxIndex() ? arr:0
}

PicFind(mode, color, n, Scan0, Stride, sx, sy, sw, sh
  , ByRef text, ByRef s1, ByRef s0
  , err1, err0, w1, h1, ByRef allpos)
{
  static MyFunc
  if !MyFunc
  {
    x32:="5589E55383EC50C745E8000000008B45242B454083C0018"
    . "945C88B45282B454483C0018945C48B45200FAF45188B551CC"
    . "1E20201D08945C0C745CC000000008B45CC8945D08B45D0894"
    . "5F8C745EC00000000EB78C745F000000000EB638B45EC0FAF4"
    . "5188B55F0C1E20201D08945BC8B45F88D50018955F889C28B4"
    . "52C01D00FB6003C31751C8B45D08D50018955D08D148500000"
    . "0008B453001C28B45BC8902EB1A8B45CC8D50018955CC8D148"
    . "5000000008B453401C28B45BC89028345F0018B45F03B45407"
    . "C958345EC018B45EC3B45447C808B45D03945CC0F4D45CC894"
    . "5B8837D08000F854D020000C745EC00000000E930020000C74"
    . "5F000000000E9140200008B45EC0FAF45188B55F0C1E20201C"
    . "28B45C001D08945F88B45388945D88B453C8945D48B55F88B4"
    . "50C01D08945BC8B45BC83C00289C28B451401D00FB6000FB6C"
    . "08945B48B45BC83C00189C28B451401D00FB6000FB6C08945B"
    . "08B55BC8B451401D00FB6000FB6C08945ACC745F400000000E"
    . "94C0100008B45F43B45D00F8D9A0000008B45F48D148500000"
    . "0008B453001D08B108B45F801D08945BC8B45BC83C00289C28"
    . "B451401D00FB6000FB6C02B45B48945E48B45BC83C00189C28"
    . "B451401D00FB6000FB6C02B45B08945E08B55BC8B451401D00"
    . "FB6000FB6C02B45AC8945DC837DE4007903F75DE4837DE0007"
    . "903F75DE0837DDC007903F75DDC8B55E48B45E001C28B45DC0"
    . "1D03B45107E0E836DD801837DD8000F88EF0000008B45F43B4"
    . "5CC0F8D960000008B45F48D1485000000008B453401D08B108"
    . "B45F801D08945BC8B45BC83C00289C28B451401D00FB6000FB"
    . "6C02B45B48945E48B45BC83C00189C28B451401D00FB6000FB"
    . "6C02B45B08945E08B55BC8B451401D00FB6000FB6C02B45AC8"
    . "945DC837DE4007903F75DE4837DE0007903F75DE0837DDC007"
    . "903F75DDC8B55E48B45E001C28B45DC01D03B45107F0A836DD"
    . "401837DD40078508345F4018B45F43B45B80F8CA8FEFFFF8B4"
    . "5E88D50018955E88D1485000000008B454801D08B4D208B55E"
    . "C01CA89D3C1E3108B4D1C8B55F001CA09DA8910817DE8FF030"
    . "0000F8FFE010000EB0490EB01908345F0018B45F03B45C80F8"
    . "CE0FDFFFF8345EC018B45EC3B45C40F8CC4FDFFFFE9D701000"
    . "08B450C83C00169C0E803000089450CC745EC00000000E98D0"
    . "00000C745F000000000EB788B45EC0FAF45188B55F0C1E2020"
    . "1C28B45C001D08945F88B45F883C00389C28B451401D08B55F"
    . "883C20289D18B551401CA0FB6120FB6D269CA2B0100008B55F"
    . "883C20189D38B551401DA0FB6120FB6D269D24B0200008D1C1"
    . "18B4DF88B551401CA0FB6120FB6D26BD27201DA3B550C0F9CC"
    . "288108345F0018B45F03B45247C808345EC018B45EC3B45280"
    . "F8C67FFFFFF8345C003C745EC00000000E901010000C745F00"
    . "0000000E9E50000008B45EC0FAF45188B55F0C1E20201C28B4"
    . "5C001D08945F88B45388945D88B453C8945D4C745F40000000"
    . "0EB708B45F43B45D07D2E8B45F48D1485000000008B453001D"
    . "08B108B45F801D089C28B451401D00FB6003C01740A836DD80"
    . "1837DD800787B8B45F43B45CC7D2E8B45F48D1485000000008"
    . "B453401D08B108B45F801D089C28B451401D00FB60084C0740"
    . "A836DD401837DD40078488345F4018B45F43B45B87C888B45E"
    . "88D50018955E88D1485000000008B454801D08B4D208B55EC0"
    . "1CA89D3C1E3108B4D1C8B55F001CA09DA8910817DE8FF03000"
    . "07F2BEB0490EB01908345F0018B45F03B45C80F8C0FFFFFFF8"
    . "345EC018B45EC3B45C40F8CF3FEFFFFEB0490EB01908B45E88"
    . "3C4505B5DC244009090"
    x64:="554889E54883EC50894D10895518448945204C894D28C74"
    . "5EC000000008B45482B858000000083C0018945CC8B45502B8"
    . "58800000083C0018945C88B45400FAF45308B5538C1E20201D"
    . "08945C4C745D0000000008B45D08945D48B45D48945FCC745F"
    . "000000000E988000000C745F400000000EB708B45F00FAF453"
    . "08B55F4C1E20201D08945C08B45FC8D50018955FC4863D0488"
    . "B45584801D00FB6003C3175218B45D48D50018955D44898488"
    . "D148500000000488B45604801C28B45C08902EB1F8B45D08D5"
    . "0018955D04898488D148500000000488B45684801C28B45C08"
    . "9028345F4018B45F43B85800000007C858345F0018B45F03B8"
    . "5880000000F8C69FFFFFF8B45D43945D00F4D45D08945BC837"
    . "D10000F8582020000C745F000000000E965020000C745F4000"
    . "00000E9490200008B45F00FAF45308B55F4C1E20201C28B45C"
    . "401D08945FC8B45708945DC8B45788945D88B55FC8B451801D"
    . "08945C08B45C083C0024863D0488B45284801D00FB6000FB6C"
    . "08945B88B45C083C0014863D0488B45284801D00FB6000FB6C"
    . "08945B48B45C04863D0488B45284801D00FB6000FB6C08945B"
    . "0C745F800000000E96C0100008B45F83B45D40F8DAA0000008"
    . "B45F84898488D148500000000488B45604801D08B108B45FC0"
    . "1D08945C08B45C083C0024863D0488B45284801D00FB6000FB"
    . "6C02B45B88945E88B45C083C0014863D0488B45284801D00FB"
    . "6000FB6C02B45B48945E48B45C04863D0488B45284801D00FB"
    . "6000FB6C02B45B08945E0837DE8007903F75DE8837DE400790"
    . "3F75DE4837DE0007903F75DE08B55E88B45E401C28B45E001D"
    . "03B45207E0E836DDC01837DDC000F88090100008B45F83B45D"
    . "00F8DA60000008B45F84898488D148500000000488B4568480"
    . "1D08B108B45FC01D08945C08B45C083C0024863D0488B45284"
    . "801D00FB6000FB6C02B45B88945E88B45C083C0014863D0488"
    . "B45284801D00FB6000FB6C02B45B48945E48B45C04863D0488"
    . "B45284801D00FB6000FB6C02B45B08945E0837DE8007903F75"
    . "DE8837DE4007903F75DE4837DE0007903F75DE08B55E88B45E"
    . "401C28B45E001D03B45207F0A836DD801837DD800785A8345F"
    . "8018B45F83B45BC0F8C88FEFFFF8B45EC8D50018955EC48984"
    . "88D148500000000488B85900000004801D08B4D408B55F001C"
    . "AC1E2104189D08B4D388B55F401CA4409C28910817DECFF030"
    . "0000F8F3A020000EB0490EB01908345F4018B45F43B45CC0F8"
    . "CABFDFFFF8345F0018B45F03B45C80F8C8FFDFFFFE91302000"
    . "08B451883C00169C0E8030000894518C745F000000000E9A40"
    . "00000C745F400000000E9880000008B45F00FAF45308B55F4C"
    . "1E20201C28B45C401D08945FC8B45FC83C0034863D0488B452"
    . "84801D08B55FC83C2024863CA488B55284801CA0FB6120FB6D"
    . "269CA2B0100008B55FC83C2014C63C2488B55284C01C20FB61"
    . "20FB6D269D24B020000448D04118B55FC4863CA488B5528480"
    . "1CA0FB6120FB6D26BD2724401C23B55180F9CC288108345F40"
    . "18B45F43B45480F8C6CFFFFFF8345F0018B45F03B45500F8C5"
    . "0FFFFFF8345C403C745F000000000E926010000C745F400000"
    . "000E90A0100008B45F00FAF45308B55F4C1E20201C28B45C40"
    . "1D08945FC8B45708945DC8B45788945D8C745F800000000E98"
    . "40000008B45F83B45D47D3A8B45F84898488D1485000000004"
    . "88B45604801D08B108B45FC01D04863D0488B45284801D00FB"
    . "6003C01740E836DDC01837DDC000F88910000008B45F83B45D"
    . "07D368B45F84898488D148500000000488B45684801D08B108"
    . "B45FC01D04863D0488B45284801D00FB60084C0740A836DD80"
    . "1837DD80078568345F8018B45F83B45BC0F8C70FFFFFF8B45E"
    . "C8D50018955EC4898488D148500000000488B8590000000480"
    . "1D08B4D408B55F001CAC1E2104189D08B4D388B55F401CA440"
    . "9C28910817DECFF0300007F2BEB0490EB01908345F4018B45F"
    . "43B45CC0F8CEAFEFFFF8345F0018B45F03B45C80F8CCEFEFFF"
    . "FEB0490EB01908B45EC4883C4505DC39090909090909090"
    MCode(MyFunc, A_PtrSize=8 ? x64:x32)
  }
  return, DllCall(&MyFunc, "int",mode
    , "uint",color, "int",n, "ptr",Scan0, "int",Stride
    , "int",sx, "int",sy, "int",sw, "int",sh
    , "AStr",text, "ptr",&s1, "ptr",&s0
    , "int",err1, "int",err0, "int",w1, "int",h1, "ptr",&allpos)
}

xywh2xywh(x1,y1,w1,h1,ByRef x,ByRef y,ByRef w,ByRef h)
{
  SysGet, zx, 76
  SysGet, zy, 77
  SysGet, zw, 78
  SysGet, zh, 79
  left:=x1, right:=x1+w1-1, up:=y1, down:=y1+h1-1
  left:=left<zx ? zx:left, right:=right>zx+zw-1 ? zx+zw-1:right
  up:=up<zy ? zy:up, down:=down>zy+zh-1 ? zy+zh-1:down
  x:=left, y:=up, w:=right-left+1, h:=down-up+1
}

GetBitsFromScreen(x,y,w,h,ByRef Scan0,ByRef Stride,ByRef bits)
{
  VarSetCapacity(bits,w*h*4,0), bpp:=32
  Scan0:=&bits, Stride:=((w*bpp+31)//32)*4
  Ptr:=A_PtrSize ? "UPtr" : "UInt", PtrP:=Ptr . "*"
  win:=DllCall("GetDesktopWindow", Ptr)
  hDC:=DllCall("GetWindowDC", Ptr,win, Ptr)
  mDC:=DllCall("CreateCompatibleDC", Ptr,hDC, Ptr)
  ;-------------------------
  VarSetCapacity(bi, 40, 0), NumPut(40, bi, 0, "int")
  NumPut(w, bi, 4, "int"), NumPut(-h, bi, 8, "int")
  NumPut(1, bi, 12, "short"), NumPut(bpp, bi, 14, "short")
  ;-------------------------
  if hBM:=DllCall("CreateDIBSection", Ptr,mDC, Ptr,&bi
    , "int",0, PtrP,ppvBits, Ptr,0, "int",0, Ptr)
  {
    oBM:=DllCall("SelectObject", Ptr,mDC, Ptr,hBM, Ptr)
    DllCall("BitBlt", Ptr,mDC, "int",0, "int",0, "int",w, "int",h
      , Ptr,hDC, "int",x, "int",y, "uint",0x00CC0020|0x40000000)
    DllCall("RtlMoveMemory", Ptr,Scan0, Ptr,ppvBits, Ptr,Stride*h)
    DllCall("SelectObject", Ptr,mDC, Ptr,oBM)
    DllCall("DeleteObject", Ptr,hBM)
  }
  DllCall("DeleteDC", Ptr,mDC)
  DllCall("ReleaseDC", Ptr,win, Ptr,hDC)
}

MCode(ByRef code, hex)
{
  ListLines, Off
  bch:=A_BatchLines
  SetBatchLines, -1
  VarSetCapacity(code, StrLen(hex)//2)
  Loop, % StrLen(hex)//2
    NumPut("0x" . SubStr(hex,2*A_Index-1,2),code,A_Index-1,"uchar")
  Ptr:=A_PtrSize ? "UPtr" : "UInt"
  DllCall("VirtualProtect", Ptr,&code, Ptr
    ,VarSetCapacity(code), "uint",0x40, Ptr . "*",0)
  SetBatchLines, %bch%
  ListLines, On
}

base64tobit(s)
{
  ListLines, Off
  Chars:="0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    . "abcdefghijklmnopqrstuvwxyz"
  SetFormat, IntegerFast, d
  StringCaseSense, On
  Loop, Parse, Chars
  {
    i:=A_Index-1, v:=(i>>5&1) . (i>>4&1)
      . (i>>3&1) . (i>>2&1) . (i>>1&1) . (i&1)
    s:=StrReplace(s,A_LoopField,v)
  }
  StringCaseSense, Off
  s:=SubStr(s,1,InStr(s,"1",0,0)-1)
  s:=RegExReplace(s,"[^01]+")
  ListLines, On
  return, s
}

bit2base64(s)
{
  ListLines, Off
  s:=RegExReplace(s,"[^01]+")
  s.=SubStr("100000",1,6-Mod(StrLen(s),6))
  s:=RegExReplace(s,".{6}","|$0")
  Chars:="0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    . "abcdefghijklmnopqrstuvwxyz"
  SetFormat, IntegerFast, d
  Loop, Parse, Chars
  {
    i:=A_Index-1, v:="|" . (i>>5&1) . (i>>4&1)
      . (i>>3&1) . (i>>2&1) . (i>>1&1) . (i&1)
    s:=StrReplace(s,v,A_LoopField)
  }
  ListLines, On
  return, s
}

ASCII(s)
{
  if RegExMatch(s,"\$(\d+)\.([\w+/]+)",r)
  {
    s:=RegExReplace(base64tobit(r2),".{" r1 "}","$0`n")
    s:=StrReplace(StrReplace(s,"0","_"),"1","0")
  }
  else s=
  return, s
}

; You can put the text library at the beginning of the script,
; and Use Pic(Text,1) to add the text library to Pic()'s Lib,
; Use Pic("comment1|comment2|...") to get text images from Lib

Pic(comments, add_to_Lib=0)
{
  static Lib:=[]
  if (add_to_Lib)
  {
    re:="<([^>]*)>[^$]+\$\d+\.[\w+/]{3,}"
    Loop, Parse, comments, |
      if RegExMatch(A_LoopField,re,r)
        Lib[Trim(r1)]:=r
    Lib[""]:=""
  }
  else
  {
    text:=""
    Loop, Parse, comments, |
      text.="|" . Lib[Trim(A_LoopField)]
    return, text
  }
}

PicN(number)
{
  return, Pic(Trim(RegExReplace(number,".","$0|"),"|"))
}

FindTextOCR(nX, nY, nW, nH, err1, err0, Text, Interval=5)
{
  OCR:="", Right_X:=nX+nW
  While (ok:=FindText(nX, nY, nW, nH, err1, err0, Text))
  {
    ; For multi text search, This is the number of text images found
    Loop, % ok.MaxIndex()
    {
      ; X is the X coordinates of the upper left corner
      ; and W is the width of the image have been found
      i:=A_Index, x:=ok[i].1, y:=ok[i].2
        , w:=ok[i].3, h:=ok[i].4, comment:=ok[i].5
      ; We need the leftmost X coordinates
      if (A_Index=1 or x<Left_X)
        Left_X:=x, Left_W:=w, Left_OCR:=comment
    }
    ; If the interval exceeds the set value, add "*" to the result
    OCR.=(A_Index>1 and Left_X-Last_X>Interval ? "*":"") . Left_OCR
    ; Update nX and nW for next search
    x:=Left_X+Left_W, nW:=(Right_X-x)//2, nX:=x+nW, Last_X:=x
  }
  Return, OCR
}


FindText2(x,y,w,h,err1,err0,text,Interval=5)
{
  xywh2xywh(x-w,y-h,2*w+1,2*h+1,x,y,w,h)
  if (w<1 or h<1)
    return, 0
  bch:=A_BatchLines
  SetBatchLines, -1
  ;--------------------------------------
  GetBitsFromScreen(x,y,w,h,Scan0,Stride,bits)
  ;--------------------------------------
  sx:=0, sy:=0, sw:=w, sh:=h
  arr:=[], info:=[], allw:=0, allv:=allcolor:=allcomment:=""
  if (err1=0 and err0=0)
    err1:=err0:=0.05
  Loop, Parse, text, |
  {
    v:=A_LoopField
    IfNotInString, v, $, Continue
    comment:="", e1:=err1, e0:=err0
    ; You Can Add Comment Text within The <>
    if RegExMatch(v,"<([^>]*)>",r)
      v:=StrReplace(v,r), comment:=Trim(r1)
    ; You can Add two fault-tolerant in the [], separated by commas
    if RegExMatch(v,"\[([^\]]*)]",r)
    {
      v:=StrReplace(v,r), r1.=","
      StringSplit, r, r1, `,
      e1:=r1, e0:=r2
    }
    StringSplit, r, v, $
    color:=r1, v:=r2
    if !InStr(color,"*")
      Continue
    StringSplit, r, v, .
    w1:=r1, v:=base64tobit(r2), h1:=StrLen(v)//w1
    if (r0<2 or h1<1 or w1>sw or h1>sh or StrLen(v)!=w1*h1)
      Continue
    if (allcolor="")
      allcolor:=StrReplace(color,"*")
    StrReplace(v,"1","",len1), len0:=StrLen(v)-len1
    e1:=Round(len1*e1), e0:=Round(len0*e0)
    info.Push(StrLen(allv),w1,h1,len1,len0,e1,e0)
    allv.=v, allw+=w1, allcomment.=comment
  }
  if (allv="")
  {
    SetBatchLines, %bch%
    return, 0
  }
  num:=info.MaxIndex(), VarSetCapacity(in,num*4,0)
  Loop, % num
    NumPut(info[A_Index], in, 4*(A_Index-1), "int")
  VarSetCapacity(ss, sw*sh, 0), k:=StrLen(allv)*4
  VarSetCapacity(s1, k, 0), VarSetCapacity(s0, k, 0)
  VarSetCapacity(allpos, 1024*4, 0)
  offsetX:=Interval, offsetY:=5
  if (ok:=PicFind2(allcolor,offsetX,offsetY,Scan0,Stride
    ,sx,sy,sw,sh,ss,allv,s1,s0,in,num,allpos))
  {
    Loop, % ok
      pos:=NumGet(allpos, 4*(A_Index-1), "uint")
      , rx:=(pos&0xFFFF)+x, ry:=(pos>>16)+y
      , arr.Push( [rx,ry,allw,h1,allcomment] )
  }
  SetBatchLines, %bch%
  return, arr.MaxIndex() ? arr:0
}

PicFind2(color, offsetX, offsetY
  , Scan0, Stride, sx, sy, sw, sh
  , ByRef ss, ByRef text, ByRef s1, ByRef s0
  , ByRef in, num, ByRef allpos)
{
  static MyFunc
  if !MyFunc
  {
    x32:="5589E55383C480C745DC00000000C745EC00000000E9DA0"
    . "000008B45EC8D1485000000008B453C01D08B008945CC8B45C"
    . "C8945D88B45D88945F88B45EC83C0018D1485000000008B453"
    . "C01D08B008945B88B45EC83C0028D1485000000008B453C01D"
    . "08B008945B4C745F000000000EB77C745F400000000EB628B4"
    . "5F00FAF452489C28B45F401D08945E88B45F88D50018955F88"
    . "9C28B453001D00FB6003C31751C8B45D88D50018955D88D148"
    . "5000000008B453401C28B45E88902EB1A8B45CC8D50018955C"
    . "C8D1485000000008B453801C28B45E889028345F4018B45F43"
    . "B45B87C968345F0018B45F03B45B47C818345EC078B45EC3B4"
    . "5400F8C1AFFFFFF8B450883C00169C0E80300008945088B452"
    . "00FAF45188B551CC1E20201D08945F88B5524B80000000029D"
    . "0C1E00289C28B451801D08945E8C745EC00000000C745F0000"
    . "00000EB7FC745F400000000EB648B55EC8B452C01D08B55F88"
    . "3C20289D18B551401CA0FB6120FB6D269CA2B0100008B55F88"
    . "3C20189D38B551401DA0FB6120FB6D269D24B0200008D1C118"
    . "B4DF88B551401CA0FB6120FB6D26BD27201DA3B55080F9CC28"
    . "8108345F4018345F8048345EC018B45F43B45247C948345F00"
    . "18B45E80145F88B45F03B45280F8C75FFFFFF8B453C8B40048"
    . "945B88B453C8B40088945B48B453C8B400C8945B08B453C8B4"
    . "0108945AC8B453C8B40148945A88B453C8B40188945A48B452"
    . "42B45B88945A08B45282B45B489459C8B45B03945AC0F4D45A"
    . "C894598C745F000000000E91E030000C745F400000000E9020"
    . "300008B45F00FAF452489C28B45F401D08945F88B45A88945E"
    . "48B45A48945E0C745E800000000EB788B45E83B45B07D328B4"
    . "5E88D1485000000008B453401D08B108B45F801D089C28B452"
    . "C01D00FB6003C01740E836DE401837DE4000F889A0200008B4"
    . "5E83B45AC7D328B45E88D1485000000008B453801D08B108B4"
    . "5F801D089C28B452C01D00FB60084C0740E836DE001837DE00"
    . "00F88630200008345E8018B45E83B45987C808B55F48B45B80"
    . "1D083E8018945D48B45F02B45108945D0837DD0007907C745D"
    . "000000000C745EC07000000E9DF0100008B45EC8D148500000"
    . "0008B453C01D08B008945CC8B45EC83C0018D1485000000008"
    . "B453C01D08B008945948B45EC83C0028D1485000000008B453"
    . "C01D08B008945908B45EC83C0038D1485000000008B453C01D"
    . "08B0089458C8B45EC83C0048D1485000000008B453C01D08B0"
    . "08945888B45EC83C0058D1485000000008B453C01D08B00894"
    . "5848B45EC83C0068D1485000000008B453C01D08B008945808"
    . "B45242B45948945C08B55D48B450C01D08945E88B45E83B45C"
    . "07D068B45E88945C08B45282B45908945BC8B55F08B451001D"
    . "08945E88B45E83B45BC7D068B45E88945BC8B45D48945C8E9D"
    . "20000008B45D08945C4E9B70000008B45C40FAF452489C28B4"
    . "5C801D08945F88B45848945E48B45808945E0C745E80000000"
    . "0EB378B55CC8B45E801D08D1485000000008B453401D08B108"
    . "B45F801D089C28B452C01D00FB6003C01740A836DE401837DE"
    . "40078568345E8018B45E83B458C7CC1C745E800000000EB378"
    . "B55CC8B45E801D08D1485000000008B453801D08B108B45F80"
    . "1D089C28B452C01D00FB60084C0740A836DE001837DE000781"
    . "18345E8018B45E83B45887CC1EB2690EB01908345C4018B45C"
    . "43B45BC0F8E3DFFFFFF8345C8018B45C83B45C00F8E22FFFFF"
    . "FEB5B8B55C88B459401D083E8018945D48345EC078B45EC3B4"
    . "5400F8C15FEFFFF8B45DC8D50018955DC8D1485000000008B4"
    . "54401D08B4D208B55F001CA89D3C1E3108B4D1C8B55F401CA0"
    . "9DA8910817DDCFF0300007F28EB0490EB01908345F4018B45F"
    . "43B45A00F8EF2FCFFFF8345F0018B45F03B459C0F8ED6FCFFF"
    . "FEB01908B45DC83EC805B5DC24000"
    x64:="554889E54883C480894D10895518448945204C894D28C74"
    . "5E000000000C745F000000000E9FF0000008B45F04898488D1"
    . "48500000000488B45784801D08B008945D08B45D08945DC8B4"
    . "5DC8945FC8B45F048984883C001488D148500000000488B457"
    . "84801D08B008945BC8B45F048984883C002488D14850000000"
    . "0488B45784801D08B008945B8C745F400000000E984000000C"
    . "745F800000000EB6F8B45F40FAF454889C28B45F801D08945E"
    . "C8B45FC8D50018955FC4863D0488B45604801D00FB6003C317"
    . "5218B45DC8D50018955DC4898488D148500000000488B45684"
    . "801C28B45EC8902EB1F8B45D08D50018955D04898488D14850"
    . "0000000488B45704801C28B45EC89028345F8018B45F83B45B"
    . "C7C898345F4018B45F43B45B80F8C70FFFFFF8345F0078B45F"
    . "03B85800000000F8CF2FEFFFF8B451083C00169C0E80300008"
    . "945108B45400FAF45308B5538C1E20201D08945FC8B5548B80"
    . "000000029D0C1E00289C28B453001D08945ECC745F00000000"
    . "0C745F400000000E991000000C745F800000000EB768B45F04"
    . "863D0488B45584801D08B55FC83C2024863CA488B55284801C"
    . "A0FB6120FB6D269CA2B0100008B55FC83C2014C63C2488B552"
    . "84C01C20FB6120FB6D269D24B020000448D04118B55FC4863C"
    . "A488B55284801CA0FB6120FB6D26BD2724401C23B55100F9CC"
    . "288108345F8018345FC048345F0018B45F83B45487C828345F"
    . "4018B45EC0145FC8B45F43B45500F8C63FFFFFF488B45788B4"
    . "0048945BC488B45788B40088945B8488B45788B400C8945B44"
    . "88B45788B40108945B0488B45788B40148945AC488B45788B4"
    . "0188945A88B45482B45BC8945A48B45502B45B88945A08B45B"
    . "43945B00F4D45B089459CC745F400000000E97B030000C745F"
    . "800000000E95F0300008B45F40FAF454889C28B45F801D0894"
    . "5FC8B45AC8945E88B45A88945E4C745EC00000000E98800000"
    . "08B45EC3B45B47D3A8B45EC4898488D148500000000488B456"
    . "84801D08B108B45FC01D04863D0488B45584801D00FB6003C0"
    . "1740E836DE801837DE8000F88EC0200008B45EC3B45B07D3A8"
    . "B45EC4898488D148500000000488B45704801D08B108B45FC0"
    . "1D04863D0488B45584801D00FB60084C0740E836DE401837DE"
    . "4000F88AD0200008345EC018B45EC3B459C0F8C6CFFFFFF8B5"
    . "5F88B45BC01D083E8018945D88B45F42B45208945D4837DD40"
    . "07907C745D400000000C745F007000000E9180200008B45F04"
    . "898488D148500000000488B45784801D08B008945D08B45F04"
    . "8984883C001488D148500000000488B45784801D08B0089459"
    . "88B45F048984883C002488D148500000000488B45784801D08"
    . "B008945948B45F048984883C003488D148500000000488B457"
    . "84801D08B008945908B45F048984883C004488D14850000000"
    . "0488B45784801D08B0089458C8B45F048984883C005488D148"
    . "500000000488B45784801D08B008945888B45F048984883C00"
    . "6488D148500000000488B45784801D08B008945848B45482B4"
    . "5988945C48B55D88B451801D08945EC8B45EC3B45C47D068B4"
    . "5EC8945C48B45502B45948945C08B55F48B452001D08945EC8"
    . "B45EC3B45C07D068B45EC8945C08B45D88945CCE9E20000008"
    . "B45D48945C8E9C70000008B45C80FAF454889C28B45CC01D08"
    . "945FC8B45888945E88B45848945E4C745EC00000000EB3F8B5"
    . "5D08B45EC01D04898488D148500000000488B45684801D08B1"
    . "08B45FC01D04863D0488B45584801D00FB6003C01740A836DE"
    . "801837DE800785E8345EC018B45EC3B45907CB9C745EC00000"
    . "000EB3F8B55D08B45EC01D04898488D148500000000488B457"
    . "04801D08B108B45FC01D04863D0488B45584801D00FB60084C"
    . "0740A836DE401837DE40078118345EC018B45EC3B458C7CB9E"
    . "B2690EB01908345C8018B45C83B45C00F8E2DFFFFFF8345CC0"
    . "18B45CC3B45C40F8E12FFFFFFEB688B55CC8B459801D083E80"
    . "18945D88345F0078B45F03B85800000000F8CD9FDFFFF8B45E"
    . "08D50018955E04898488D148500000000488B8588000000480"
    . "1D08B4D408B55F401CAC1E2104189D08B4D388B55F801CA440"
    . "9C28910817DE0FF0300007F28EB0490EB01908345F8018B45F"
    . "83B45A40F8E95FCFFFF8345F4018B45F43B45A00F8E79FCFFF"
    . "FEB01908B45E04883EC805DC390909090909090"
    MCode(MyFunc, A_PtrSize=8 ? x64:x32)
  }
  return, DllCall(&MyFunc, "int",color, "int",offsetX
    , "int",offsetY, "ptr",Scan0, "int",Stride
    , "int",sx, "int",sy, "int",sw, "int",sh
    , "ptr",&ss, "AStr",text, "ptr",&s1, "ptr",&s0
    , "ptr",&in, "int",num, "ptr",&allpos)
}

